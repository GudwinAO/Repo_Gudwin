"""Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для одной и той же задачи.
Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС."""

# Разрядность системы - 64 бит.
# Для оценки использую 3 задания. 1 урок. 1 задание

import sys

number = input('Введите целое трехзначное число: ')

if len(number) != 3:
    print('Ошибка. Необходимо ввести трехзначное число')
    number = input('Введите целое трехзначное число: ')


# Решаем без использования цикла. Находим все составные части трехзначного числа
number_3 = int(number) % 10
number_2 = (int(number) // 10) % 10
number_1 = int(number) // 100

result_1 = number_1+number_2+number_3
result_2 = number_1*number_2*number_3

print(f"Сумма чисел вашего числа равно: {result_1} , произведение чисел вашего числа равно: {result_2} ")

# блок анализа:

# количество ссылок на переменные результата
print(sys.getrefcount(result_1))
print(sys.getrefcount(result_2))

# количество байтов в оперативной памяти (по 28)
print(sys.getsizeof(result_1))
print(sys.getsizeof(result_2))

# экспериментальные истории со списками, множествами и кортежами
"""
print(sys.getsizeof([]))
56
print(sys.getsizeof([1]))
64
print(sys.getsizeof([1, 2, 3, 4]))
120
print(sys.getsizeof(['a long longlong string']))
64

Множества и словари требует большего выделения памяти  даже в пустом виде

print(sys.getsizeof(set()))
216
print(sys.getsizeof(set([1)))
216
print(sys.getsizeof(set([1,2,2,3,4,5,5,6,])))
728

print(sys.getsizeof({}))
64
print(sys.getsizeof(dict(a=1)))
232
print(sys.getsizeof(dict(a=1, b=2, c=3)))
232

"""


