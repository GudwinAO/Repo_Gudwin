""" Задание 3.
Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Запрашивать у пользователя данные
и заполнять список необходимо только числами.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится
на экран.
Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
Вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст
(не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться."""




class Error_number:

    @staticmethod
    def get_number(number):
        ERROR = 'Данные введены неверно, попробуйте еще'


        if "." in number:
            try:
                number_float = float(number)
                return number_float
            except ValueError:
                return ERROR
        elif number == 'stop':
            return 'stop'
        else:
            try:
                number_int = int(number)
                return number_int
            except ValueError:
                return ERROR




number_list = []
while True:
    number_int = input('Введите число. Если хотите закончить -  введите "stop": ')
    result = Error_number.get_number(number_int)
    if type(result) != str:
        number_list.append(Error_number.get_number(number_int))
        print(f'Список чисел обновлен: {number_list}')
    elif result == 'stop':
        print('Введение данных завершено')
        break
    else:
        print(result)
